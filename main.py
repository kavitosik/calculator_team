import asyncio
import os
import sqlite3
import sympy
import numpy as np
from datetime import datetime
from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import find_dotenv, load_dotenv
from loguru import logger
from typing import Tuple, Optional

load_dotenv(find_dotenv())
TOKEN = os.getenv("BOT_TOKEN")

dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
examples_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="2 + 2 * 3"),
            KeyboardButton(text="x¬≤ - 5x + 6 = 0"),
        ],
        [
            KeyboardButton(text="‚àö16 + ‚àõ27"),
            KeyboardButton(text="sin(œÄ/2) + cos(0)"),
        ],
        [
            KeyboardButton(text="‚à´(x^2, (x, 0, 3))"),
            KeyboardButton(text="derivative(x^3, x)"),
        ],
        [
            KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
            KeyboardButton(text="–ü–æ–º–æ—â—å"),
        ]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É..."
)

def save_query_to_db(user_id: int, username: str, query: str, result: str, solution: str):
    """Save user query to the database with detailed solution"""
    conn = sqlite3.connect("math_bot.db")
    cursor = conn.cursor()
    
    cursor.execute(
        """INSERT INTO query_history 
        (user_id, username, query, result, solution, timestamp) 
        VALUES (?, ?, ?, ?, ?, datetime('now'))""",
        (user_id, username, query, result, solution)
    )
    
    conn.commit()
    conn.close()

def get_user_history(user_id: int, limit: int = 10):
    """Get user query history"""
    conn = sqlite3.connect("math_bot.db")
    cursor = conn.cursor()
    
    cursor.execute(
        """SELECT query, result, solution, timestamp 
        FROM query_history 
        WHERE user_id = ? 
        ORDER BY timestamp DESC 
        LIMIT ?""",
        (user_id, limit)
    )
    
    history = cursor.fetchall()
    conn.close()
    return history

def solve_math_problem(problem: str) -> Tuple[Optional[str], Optional[str]]:
    """Solve various math problems with detailed steps"""
    try:
        problem = problem.strip()
        
        # 1. –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        if all(c not in problem for c in ['=', '‚à´', 'derivative', 'lim']):
            x = sympy.symbols('x')
            expr = sympy.sympify(problem)
            steps = f"–í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:\n{expr} = "
            result = expr.evalf()
            steps += f"{result}\n\n"
            steps += f"–ü–æ—à–∞–≥–æ–≤–æ:\n{sympy.pretty(expr)} = {result}"
            return str(result), steps
        
        # 2. –†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        if '=' in problem:
            x = sympy.symbols('x')
            equation = sympy.Eq(*map(sympy.sympify, problem.split('=')))
            solutions = sympy.solve(equation, x)
            
            steps = f"–†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ:\n{sympy.pretty(equation)}\n\n"
            steps += "–®–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è:\n"
            for i, sol in enumerate(solutions, 1):
                steps += f"{i}. x = {sol}\n"
            
            return f"x = {solutions}", steps
        
        # 3. –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ
        if problem.startswith('derivative'):
            _, func, var = problem.split('(')[1].split(')')[0].split(',')
            x = sympy.symbols(var.strip())
            f = sympy.sympify(func.strip())
            derivative = sympy.diff(f, x)
            
            steps = f"–ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é:\nd/d{var} ({func}) = "
            steps += f"\n{sympy.pretty(derivative)}\n\n"
            steps += "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n"
            steps += sympy.pretty(sympy.Derivative(f, x)) + " = "
            steps += sympy.pretty(derivative)
            
            return str(derivative), steps
        
        # 4. –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã
        if problem.startswith('‚à´') or problem.startswith('integral'):
            parts = problem.split('(')[1].split(')')[0].split(',')
            func = parts[0].strip()
            var_info = parts[1].strip()[1:-1].split(',')
            var = var_info[0].strip()
            if len(var_info) > 1:
                lower = var_info[1].strip()
                upper = var_info[2].strip()
                x = sympy.symbols(var)
                f = sympy.sympify(func)
                integral = sympy.integrate(f, (x, lower, upper))
                
                steps = f"–í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª:\n‚à´({func})d{var} –æ—Ç {lower} –¥–æ {upper} = "
                steps += f"\n{sympy.pretty(integral)}\n\n"
                steps += "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n"
                steps += sympy.pretty(sympy.Integral(f, (x, lower, upper))) + " = "
                steps += sympy.pretty(integral)
            else:
                x = sympy.symbols(var)
                f = sympy.sympify(func)
                integral = sympy.integrate(f, x)
                
                steps = f"–ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª:\n‚à´({func})d{var} = "
                steps += f"\n{sympy.pretty(integral)} + C\n\n"
                steps += "–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n"
                steps += sympy.pretty(sympy.Integral(f, x)) + " = "
                steps += sympy.pretty(integral) + " + C"
            
            return str(integral), steps
        
        # 5. –ú–∞—Ç—Ä–∏—Ü—ã –∏ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
        if 'matrix' in problem.lower() or 'system' in problem.lower():
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏
            pass
        
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ."
    
    except Exception as e:
        logger.error(f"Math solving error: {e}")
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏: {str(e)}"

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    welcome_msg = (
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! üëã\n\n"
        "–Ø - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç üßÆ\n"
        "–Ø –º–æ–≥—É —Ä–µ—à–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏:\n\n"
        "üîπ –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
        "üîπ –ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è\n"
        "üîπ –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ\n"
        "üîπ –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ\n"
        "üîπ –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\n"
        "üîπ –ú–∞—Ç—Ä–∏—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ 2 + 2 * 3\n"
        "‚Ä¢ x^2 - 5x + 6 = 0\n"
        "‚Ä¢ derivative(x^3, x)\n"
        "‚Ä¢ ‚à´(x^2, (x, 0, 3))\n"
        "‚Ä¢ matrix([[1, 2], [3, 4]]) * matrix([[5], [6]])\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/examples - –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º"
    )
    await message.answer(welcome_msg, reply_markup=examples_keyboard)

@dp.message(Command("help"))
async def command_help_handler(message: Message) -> None:
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. <b>–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>:\n"
        "   +, -, *, /, ^ –∏–ª–∏ ** - –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å\n"
        "   sqrt(x) - –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å\n\n"
        "2. <b>–£—Ä–∞–≤–Ω–µ–Ω–∏—è</b>:\n"
        "   –§–æ—Ä–º–∞—Ç: x^2 - 5x + 6 = 0\n\n"
        "3. <b>–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ</b>:\n"
        "   –§–æ—Ä–º–∞—Ç: derivative(x^3, x)\n\n"
        "4. <b>–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã</b>:\n"
        "   –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π: ‚à´(x^2, x)\n"
        "   –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π: ‚à´(x^2, (x, 0, 3))\n\n"
        "5. <b>–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è</b>:\n"
        "   sin(x), cos(x), tan(x)\n"
        "   œÄ (pi) - —á–∏—Å–ª–æ –ø–∏\n\n"
        "6. <b>–ú–∞—Ç—Ä–∏—Ü—ã</b>:\n"
        "   matrix([[1, 2], [3, 4]])\n\n"
        "–î–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /examples"
    )
    await message.answer(help_text)


@dp.message()
async def echo_handler(message: Message) -> None: 

@dp.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def help_handler(message: Message) -> None:
    await command_help_handler(message)

@dp.message()
async def handle_math_query(message: Message) -> None:
    if message.text.startswith('/'):
        return
        
    query = message.text
    result, solution = solve_math_problem(query)
    
    if result is None:
        await message.answer(solution)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_query_to_db(
        user_id=message.from_user.id,
        username=message.from_user.username,
        query=query,
        result=result,
        solution=solution
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    response = (
        f"üîπ <b>–ó–∞–¥–∞—á–∞</b>:\n{query}\n\n"
        f"üî∏ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>:\n{result}\n\n"
        f"üìù <b>–†–µ—à–µ–Ω–∏–µ</b>:\n{solution}"
    )
    await message.answer(response)

async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("Bot starting...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    if not os.path.exists("math_bot.db"):
        logger.info("Creating database...")
        conn = sqlite3.connect("math_bot.db")
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS query_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                query TEXT NOT NULL,
                result TEXT,
                solution TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_id ON query_history(user_id)")
        conn.commit()
        conn.close()
    
    asyncio.run(main())